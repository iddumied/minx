minx virtual processing unit specification
------------------------------------------

- opcode is 16 Bit
- registers are addressed with 16 Bit
- values are 64 bit 
- Program-adresses are 64 bit

The minx vpu is _stupid_. You can jump to _every_ location in the binary, if it
exists. So you or your compiler has to care about the jumps, the machine
does not. It only checks, if the code position exists. If not, it stops
executing with printing a fatal error message.

Special registers:
------------------

Registers 0x00 to 0x1F are special, they _should_ not be used by the program. But they can.
The VPU does not care about modifying the programm-ptr at all. The Binary
can write to this register as it can write to every other register!

- 0x0000	Programm-ptr, is zero at init and (uint64_t)-1 at end of programm
- 0x0001	(unused yet)
- 0x0002	akku-register
- 0x0003	status-register 
				Bit	|	use 
				----+-------
				0	|	overflow 
                1   |   zero-bit
                2   |   div-zero
                3   |   alloc bit (set if alloc didn't work)
                4   |   free bit (set if free didn't work)
                5   |   resize bit (set if resize didn't work)
                6   |   put bit (set if put didn't work)
                7   |   read bit (set if read didn't work)
                8   |   no-random bit (set if rand didn't work)
- 0x0004-0x001F (unused yet, will be used for more status registers and stuff)

So, 0x0020 is the first register which should be used for program data. With
current implementation, there are 2^8 registers, so 0x0000FFFF is the last
register. Registers are addressed with 16 bit because if the machine should
provide more registers later on, there are just small changes.

So, 32 Registers for special use, 256 Registers all in all, makes 224 Registers
for program data.

stack 
-----
- infinite size (only limited by your system)
- used for both function calls and pushing values

regstack 
-------- 
- A stack where all registers can be pushed to with one command.

opcodes
-------

'Register'	    stands for 16 Bit (2 Byte) register address (shortcut 'reg')
                (hardcoded in binary)

'Value'		    stands for 64 Bit (8 Byte) value
                (hardcoded in binary)

'Adress'	    stands for 64 Bit (8 Byte) code address 
                (hardcoded in binary)

'MemoryID'      stands for a register where a 64 Bit (8 Byte) memory ID stands. 

'offset'        stands for register-address where memory offset in byte stands

'size'          stands for register-address where the size in byte stands, maximal 8

Maximal 5 parameters at the moment!

code | Short ex.| arguments				        | Expl.
-----+----------+-------------------------------+-----------------------
0x00 | NOP		| none					        |
0x01 | CALL	    | Adress					    | Push current addr to Stack, jump to address
0x02 | RET		| none					        | Jump to $(stack pop)
     |          |                               |
0x03 | MOV		| Register, Register		    |
0x04 | MOVI	    | Register, Value			    |
     |          |                               |
0x05 | NOT		| Register				        | result in akku
0x06 | NOTR	    | Register				        | result in register
     |          |                               |
0x07 | AND		| Register, Register		    | result in akku
0x08 | ANDI	    | Register, Value			    | result in akku
0x09 | ANDR	    | Register, Register		    | result in register 
0x0A | ANDIR	| Register, Value			    | result in register
     |          |                               |
0x0B | OR		| Register, Register		    | result in akku 
0x0C | ORI		| Register, Value			    | result in akku 
0x0D | ORR		| Register, Register		    | result in register 
0x0E | ORIR	    | Register, Value			    | result in register
     |          |                               |
0x0F | DEC		| Register				        | result in register 
0x10 | INC		| Register				        | result in register 
     |          |                               |
0x11 | LSH		| Register				        | result in register 
0x12 | RSH		| Register				        | result in register 
     |          |                               |
0x13 | CMP      | Register, Register            | compare, result in akku, 1 if first is bigger, 2 if second is bigger, zero if equal
0x14 | CMPI     | Register, Value               | see opcode CMP
0x15 | EQL      | Register, Register            | 1 in akku if val equal
0x16 | EQLI     | Register, Value               | 1 if akku if equal
     |          |                               |
0x17 | SETB     | Register, Register            | result in register
0x18 | SETBI    | Register, Value               | result in register
0x19 | CLRB     | Register, Register            | result in register
0x1A | CLRBI    | Register, Value               | result in register
     |          |                               |
0x20 | ADD		| Register, Register		    | result in akku 
0x21 | ADDI		| Register, Value			    | result in akku 
0x22 | ADDR		| Register, Register		    | result in register 
0x23 | ADDIR	| Register, Value			    | result in register
0x24 | SUB      | Register, Register            | result in akku 
0x25 | SUBI     | Register, Value               | result in akku 
0x26 | SUBR     | Register, Register            | result in register 
0x27 | SUBIR    | Register, Value               | result in register 
0x28 | MUL      | Register, Register            | result in akku 
0x29 | MULI     | Register, Value               | result in akku 
0x2A | MULR     | Register, Register            | result in register
0x2B | MULIR    | Register, Value               | result in register
0x2C | DIV      | Register, Register            | result in akku, dividing by zero will result in no dividing
0x2D | DIVI     | Register, Value               | result in akku, dividing by zero will result in no dividing
0x2E | DIVR     | Register, Register            | result in register, dividing by zero will result in no dividing 
0x2F | DIVIR    | Register, Value               | result in register, dividing by zero will result in no dividing 
0x30 | POW      | Register, Register            | result in akku
0x31 | POWI     | Register, Value               | result in akku
0x32 | POWR     | Register, Register            | result in register 
0x33 | POWIR    | Register, Value               | result in register
0x34 | SQRT     | Register                      | result in akku
0x35 | SQRTR    | Register                      | result in register
0x36 | MOD      | Register, Register            | result in akku 
0x37 | MODI     | Register, Value               | result in akku 
0x38 | MODR     | Register, Register            | result in register
0x39 | MODIR    | Register, Value               | result in register
0x3A | RAND     | none                          | result in akku
0x3B | URAND    | none                          | result in akku
0x3C | READSTACK| none                          | result in akku
0x3D | PUSH		| Register				        | push register to stack
0x3E | POP		| Register				        | pop from stack into register
0x3F | DROP		| none					        | pop from stack and drop
     |          |                               |
0x40 | JMP		| Adress					    | jump to address (number of byte)
0x41 | JMPIZ	| Register, Adress		        | jump if register is zero
0x42 | JMPNZ	| Register, Adress		        | jump if register is not zero
0x43 | IFZJMP	| Adress, Adress			    | if akku is zero jump, else jump
0x44 | EXIT     | Register                      | Exit with errorcode from register
     |          |                               |
0x45 | XOR      | Register, Register            | result in akku 
0x46 | XORI     | Register, Value               | result in akku 
0x47 | XORR     | Register, Register            | result in register
0x48 | XORIR    | Register, Value               | result in register 
     |          |                               |
0x49 | JMPR     | Register                      | jump to address in register 
0x4A | JMPIZR   | Register, Register            | if reg is zero, jump to address in register 
0x4B | JMPNZR	| Register, Register            | jump to address in register if register is not zero
0x4C | IFZJMPRR	| Register, Register            | if akku is zero jump, else jump (to addr in register|register)
0x4D | IFZJMPRA	| Register, Address             | if akku is zero jump, else jump (to addr in register|address)
0x4E | LDADDR   | <none>                        | Load address of next opcode into akku
0x4F | EXITI    | Value                         | exit with value
-----+----------+-------------------------------+--------------------------- 

These are special debugging opcodes and are only print when compiled with 
DEBUGGING and started with "-d" flag. If not compiled with DEBUGGING, they
will be ignored automatically! The 0x5? block is reserved for them.

-----+----------+-------------------------------+--------------------------- 
0x50 | PSTACK   | none                          | print stack
0x51 | PREGS    | none                          | print registers
0x52 | PPROG    | none                          | print program
0x53 | PMEMS    | none                          | print all allocatet mems
0x54 | PMEM     | MemoryID                      | print memory
-----+----------+-------------------------------+--------------------------- 

Heap opcodes (0x6? are reserved for HEAP opcodes):

-----+----------+-------------------------------+--------------------------- 
0x60 | ALLOC    | Register                      | MemID or 0x00 in akku
0x61 | ALLOCI   | Value                         | MemID or 0x00 in akku
0x62 | RESIZE   | MemoryID, Register            | 
0x63 | RESIZEI  | MemoryID, Value               | 
0x64 | FREE     | MemoryID                      | 
0x65 | PUT      | MemoryID, offset, size, reg   | offset in mem, size (max 8 Byte), register to read from
0x66 | READ     | MemoryID, offset, size, reg   | offset in mem, size (max 8 Byte), register to put into 
0x67 | GETSIZE  | MemoryID                      | load size of the memory into akku
-----+----------+-------------------------------+--------------------------- 

-----+----------+-------------------------------+--------------------------- 
0x80 | LBSH     | Register                      | Left shift one byte
0x81 | RBSH     | Register                      | Right shift one byte
0x82 | EXPORT   | none                          | push all register (except program pointer) to the regstack
0x83 | IMPORT   | none                          | pop all registers (except program pointer) from the regstack (all registers will be overridden, except program-pointer)
-----+----------+-------------------------------+--------------------------- 
