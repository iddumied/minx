Much simpler:

registers
---------

- return register / akku 
- overflow 
- working registers are allocated on the fly

Register size can be set via command line options
Adress size can be set via command line options
Register adress number can be set via command line options.


stack
-----
- infinite size
- used for both function calls and pushing values

binary protocol
---------------

the code is interpreted from begin of file to end of file.

Commands:

'Register' stands for register number, or 0x00 for Akku
'Adress' stands for number of byte in code
'Value' stands for value, size is set dynamically via command line

code	|	Short expl.	|	arguments				|	Expl.
--------+---------------+---------------------------+---------------------------
0x00	|	NOP			|	none					|
0x01	|	RET			|	none					| Jump to $(stack pop)

0x02	|	MOV			|	Register, Register		|
0x03	|	MOVI		|	Register, Value			|

0x04	|	NOT			|	Register				| result in akku
0x05	|	NOTR		|	Register				| result in register

0x06	|	AND			|	Register, Register		| result in akku
0x07	|	ANDI		|	Register, Value			| result in akku
0x08	|	ANDR		|	Register, Register		| result in register 
0x09	|	ANDIR		|	Register, Value			| result in register

0x0A	|	OR			|	Register, Register		| result in akku 
0x0B	|	ORI			|	Register, Value			| result in akku 
0x0C	|	ORR			|	Register, Register		| result in register 
0x0D	|	ORIR		|	Register, Value			| result in register

0x0E	|	DEC			|	Register				| result in register 
0x0F	|	INC			|	Register				| result in register 

0x10	|	LSH			|	Register				| result in register 
0x11	|	RSH			|	Register				| result in register 

0x20	|	PUSH		|	Register				| push register to stack
0x21	|	POP			|	Register				| pop from stack into register
0x22	|	DROP		|	none					| pop from stack and drop

0x30	|	ADD			|	Register, Register		| result in akku 
0x31	|	ADDI		|	Register, Value			| result in akku 
0x32	|	ADDR		|	Register, Register		| result in register 
0x33	|	ADDIR		|	Register, Value			| result in register

0x40	|	JMP			|	Adress					| jump to address (number of byte)
0x41	|	JMPIZ		|	Register, Adress		| jump if register is zero
0x42	|	JMPNZ		|	Register, Adress		| jump if register is not zero
0x43	|	IFZJMP		|	Adress, Adress			| if akku is zero jump, else jump

0x50	|	STARTAT		|	Adress					| Adress of main()

Special: (no support yet, later versions will support them)

0x60	|	LNREG		|	Register				| load value of next register into akku
0x61	|	LPREG		|	Register				| load value of prev register into akku

Not supported yet:
-----------------
- Pointers to registers

0x70	|	GETP		|	Register				| Write current program pointer to register and next one
0x71	|	GETPA		|	Adress, Register		| Write adress to register and next register
0x72	|	SETP		|	Register				| Set current programm pointer to address(register, next register)

