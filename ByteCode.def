Much simpler:

opcode is 16 Bit
registers are addressed with 16 Bit
values are 64 bit 
Program-adresses are 64 bit

special registers:
------------------
Registers 0x00 to 0xAF are special, they are not useable for program data.

- 0x0000000000000000	Programm-ptr, is zero at init and 0xFFFF at end of programm
- 0x0000000000000001	(unused)
- 0x0000000000000002	akku-register
- 0x0000000000000003	status-register 
							Bit	|	use 
							----+-------
							0	|	overflow 
							1-7	|	not used yet
- 0x0000000000000004	overflow value 
- 0x0000000000000005-0x00000000000000AF (unused yet)

All other registers are available (if addressable with 64 bit)

stack 
-----
- infinite size (only limited by your system)
- used for both function calls and pushing values

codes
-----

'Register'	stands for 16 Bit register address 
'Value'		stands for 64 Bit value
'Adress'	stands for 64 Bit code address

code	|	Short expl.	|	arguments				|	Expl.
--------+---------------+---------------------------+---------------------------
0x00	|	NOP			|	none					|
0x01	|	CALL		|	Adress					| Push current addr to Stack, jump to address
0x02	|	RET			|	none					| Jump to $(stack pop)

0x03	|	MOV			|	Register, Register		|
0x04	|	MOVI		|	Register, Value			|

0x05	|	NOT			|	Register				| result in akku
0x06	|	NOTR		|	Register				| result in register

0x07	|	AND			|	Register, Register		| result in akku
0x08	|	ANDI		|	Register, Value			| result in akku
0x09	|	ANDR		|	Register, Register		| result in register 
0x0A	|	ANDIR		|	Register, Value			| result in register

0x0B	|	OR			|	Register, Register		| result in akku 
0x0C	|	ORI			|	Register, Value			| result in akku 
0x0D	|	ORR			|	Register, Register		| result in register 
0x0E	|	ORIR		|	Register, Value			| result in register

0x0F	|	DEC			|	Register				| result in register 
0x10	|	INC			|	Register				| result in register 

0x11	|	LSH			|	Register				| result in register 
0x12	|	RSH			|	Register				| result in register 

0x20	|	PUSH		|	Register				| push register to stack
0x21	|	POP			|	Register				| pop from stack into register
0x22	|	DROP		|	none					| pop from stack and drop

0x30	|	ADD			|	Register, Register		| result in akku 
0x31	|	ADDI		|	Register, Value			| result in akku 
0x32	|	ADDR		|	Register, Register		| result in register 
0x33	|	ADDIR		|	Register, Value			| result in register

0x40	|	JMP			|	Adress					| jump to address (number of byte)
0x41	|	JMPIZ		|	Register, Adress		| jump if register is zero
0x42	|	JMPNZ		|	Register, Adress		| jump if register is not zero
0x43	|	IFZJMP		|	Adress, Adress			| if akku is zero jump, else jump

Special: (no support yet, later versions will support them)

0x60	|	LNREG		|	Register				| load value of next register into akku
0x61	|	LPREG		|	Register				| load value of prev register into akku

Not supported yet:
-----------------
- Pointers to registers

0x70	|	GETP		|	Register				| Write current program pointer to register
0x71	|	GETPA		|	Adress, Register		| Write adress to register
0x72	|	SETP		|	Register				| Set current programm pointer to address(register)

