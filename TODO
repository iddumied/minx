TODO:

4) overflow value is not set into overflow-value-register

5) define a op code for defining op-codes.
	Something like this:

	DEF(opc, funcloc)

	where opc is the opcode to define (or redefine). It will be automatically
	masked for 16 bit.
	The funcloc is a pointer to a function which is defined somewhere in the
	binary. This function is read into the VPU and stored there. If the op code
	which was defined is used, the VPU executes the stored procedure.

	There should be some status registers reserved for statuses about the call.
		-	was a override
		-	worked/error

5.1)define a op code ISDEV(reg, opc) for getting if a opcode is defined, result
	in 'reg'

9)	File reader should read the file as linked list, with automatically removing 
	"old" parts of the file from memory to keep memuse smart.

12) Implement heap:
		- opcodes: 
			ALLOC(size in byte) -> ptr/addr of first byte in akku or 0x00 on error
			RESIZE(addr, size in byte)
			FREE(addr)
			PUT(addr, register-ptr, value-size in byte)
			READ(addr, register-ptr, size in byte)

		PUT and READ require a ptr to a register and a size parameter. If the
		size is more than one register (8 byte), next register will be used to
		put or read!

		- statuses:
			- statusflags for all opcodes for errors 
			- counter for how much register were used to PUT from
			- counter for how much register were used to READ into 

	Manage the heaps in a linked list, each entry has its size, which is used to
	calculate the address of the next entry.

13)	Opcodes with more than 2 parameters?
